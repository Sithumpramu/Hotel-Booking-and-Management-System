{"ast":null,"code":"var _s2 = $RefreshSig$();\nimport { useState } from 'react';\nexport const usePwdReset = () => {\n  _s2();\n  var _s = $RefreshSig$();\n  const [password, setPassword] = useState('');\n  const [repassword, setRepassword] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const resetPassword = async () => {\n    _s();\n    const {\n      token\n    } = useParams();\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(`http://localhost:4000/user/resetPassword/${token}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          password,\n          repassword\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error);\n      }\n      setIsLoading(false);\n      // Handle success, maybe redirect the user or show a success message\n    } catch (error) {\n      setError(error.message);\n      setIsLoading(false);\n    }\n  };\n  _s(resetPassword, \"6Tk6ghqNiWTOGOAnfLNS16WMoQE=\", true);\n  return {\n    password,\n    repassword,\n    setPassword,\n    setRepassword,\n    isLoading,\n    error,\n    resetPassword\n  };\n};\n_s2(usePwdReset, \"I8puvvyL7B4y1lsPw6Aabu/vfpM=\");","map":{"version":3,"names":["useState","usePwdReset","_s2","_s","$RefreshSig$","password","setPassword","repassword","setRepassword","isLoading","setIsLoading","error","setError","resetPassword","token","useParams","response","fetch","method","headers","body","JSON","stringify","data","json","ok","Error","message"],"sources":["D:/Mern folder/frontend/src/hooks/usePwdReset.js"],"sourcesContent":["import { useState } from 'react';\r\n\r\nexport const usePwdReset= () => {\r\n  const [password, setPassword] = useState('');\r\n  const [repassword, setRepassword] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  const resetPassword = async () => {\r\n    const { token } = useParams();\r\n\r\n    setIsLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const response = await fetch(`http://localhost:4000/user/resetPassword/${token}`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ password, repassword }),\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) {\r\n        throw new Error(data.error);\r\n      }\r\n\r\n      setIsLoading(false);\r\n      // Handle success, maybe redirect the user or show a success message\r\n    } catch (error) {\r\n      setError(error.message);\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return { password, repassword, setPassword, setRepassword, isLoading, error, resetPassword };\r\n};\r\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAEhC,OAAO,MAAMC,WAAW,GAAEA,CAAA,KAAM;EAAAC,GAAA;EAAA,IAAAC,EAAA,GAAAC,YAAA;EAC9B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACO,UAAU,EAAEC,aAAa,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACS,SAAS,EAAEC,YAAY,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACW,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;EAExC,MAAMa,aAAa,GAAG,MAAAA,CAAA,KAAY;IAAAV,EAAA;IAChC,MAAM;MAAEW;IAAM,CAAC,GAAGC,SAAS,CAAC,CAAC;IAE7BL,YAAY,CAAC,IAAI,CAAC;IAClBE,QAAQ,CAAC,IAAI,CAAC;IAEd,IAAI;MACF,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAE,4CAA2CH,KAAM,EAAC,EAAE;QAChFI,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEjB,QAAQ;UAAEE;QAAW,CAAC;MAC/C,CAAC,CAAC;MAEF,MAAMgB,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAElC,IAAI,CAACR,QAAQ,CAACS,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACZ,KAAK,CAAC;MAC7B;MAEAD,YAAY,CAAC,KAAK,CAAC;MACnB;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,QAAQ,CAACD,KAAK,CAACgB,OAAO,CAAC;MACvBjB,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAACP,EAAA,CA3BIU,aAAa;EA6BnB,OAAO;IAAER,QAAQ;IAAEE,UAAU;IAAED,WAAW;IAAEE,aAAa;IAAEC,SAAS;IAAEE,KAAK;IAAEE;EAAc,CAAC;AAC9F,CAAC;AAACX,GAAA,CApCWD,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}