{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\nexport const useUpdate = () => {\n  _s();\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const navigation = useNavigate();\n  const Update = async (password, newpassword) => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const decodedToken = jwtDecode(localStorage.getItem('token')); // Assuming token is in localStorage\n      const userId = decodedToken.userId; // Access the ID from the decoded token\n      console.log(userId);\n      const response = await fetch('http://localhost:4000/user/update/' + userId, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          password,\n          newpassword\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.error);\n      }\n\n      // Password updated successfully\n      setIsLoading(false);\n      navigation('/');\n    } catch (error) {\n      setError(error.message);\n      setIsLoading(false);\n    }\n  };\n  return {\n    Update,\n    isLoading,\n    error\n  };\n};\n_s(useUpdate, \"h6jwmqNCFNtqa5jr4Xvk9NJYk0M=\", false, function () {\n  return [useNavigate];\n});","map":{"version":3,"names":["useState","useNavigate","useSearchParams","useUpdate","_s","error","setError","isLoading","setIsLoading","navigation","Update","password","newpassword","decodedToken","jwtDecode","localStorage","getItem","userId","console","log","response","fetch","method","headers","body","JSON","stringify","data","json","ok","Error","message"],"sources":["D:/Mern folder/frontend/src/hooks/useUpdate.js"],"sourcesContent":["import { useState } from 'react';\r\nimport { useNavigate ,useSearchParams} from 'react-router-dom';\r\n\r\n  export const useUpdate = () => {\r\n  const [error, setError] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const navigation = useNavigate();\r\n\r\n\r\n\r\n  const Update = async (password,newpassword) => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n\r\n  \r\n    \r\n    try {\r\n      const decodedToken = jwtDecode(localStorage.getItem('token')); // Assuming token is in localStorage\r\n      const userId = decodedToken.userId; // Access the ID from the decoded token\r\n      console.log(userId)\r\n        const response = await fetch('http://localhost:4000/user/update/' + userId ,{\r\n        method: 'PATCH',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ password , newpassword}),\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) {\r\n        throw new Error(data.error);\r\n      }\r\n\r\n      // Password updated successfully\r\n      setIsLoading(false);\r\n      navigation('/');\r\n    } catch (error) {\r\n      setError(error.message);\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return { Update, isLoading, error };\r\n};\r\n\r\n\r\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,WAAW,EAAEC,eAAe,QAAO,kBAAkB;AAE5D,OAAO,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACO,SAAS,EAAEC,YAAY,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAMS,UAAU,GAAGR,WAAW,CAAC,CAAC;EAIhC,MAAMS,MAAM,GAAG,MAAAA,CAAOC,QAAQ,EAACC,WAAW,KAAK;IAC7CJ,YAAY,CAAC,IAAI,CAAC;IAClBF,QAAQ,CAAC,IAAI,CAAC;IAId,IAAI;MACF,MAAMO,YAAY,GAAGC,SAAS,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;MAC/D,MAAMC,MAAM,GAAGJ,YAAY,CAACI,MAAM,CAAC,CAAC;MACpCC,OAAO,CAACC,GAAG,CAACF,MAAM,CAAC;MACjB,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAoC,GAAGJ,MAAM,EAAE;QAC5EK,MAAM,EAAE,OAAO;QACfC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEf,QAAQ;UAAGC;QAAW,CAAC;MAChD,CAAC,CAAC;MAEF,MAAMe,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAElC,IAAI,CAACR,QAAQ,CAACS,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACtB,KAAK,CAAC;MAC7B;;MAEA;MACAG,YAAY,CAAC,KAAK,CAAC;MACnBC,UAAU,CAAC,GAAG,CAAC;IACjB,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACdC,QAAQ,CAACD,KAAK,CAAC0B,OAAO,CAAC;MACvBvB,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAED,OAAO;IAAEE,MAAM;IAAEH,SAAS;IAAEF;EAAM,CAAC;AACrC,CAAC;AAACD,EAAA,CAvCaD,SAAS;EAAA,QAGHF,WAAW;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}