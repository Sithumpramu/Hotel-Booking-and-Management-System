{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { useAuthContext } from './useAuthContext';\nimport { useNavigate, useLocation } from 'react-router-dom';\nexport const useLogin = () => {\n  _s();\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const {\n    dispatch\n  } = useAuthContext();\n  const navigation = useNavigate();\n  const location = useLocation();\n  const login = async (email, password) => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch('http://localhost:4000/user/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      const json = await response.json();\n      if (!response.ok) {\n        throw new Error(json.error);\n      }\n\n      // save the user to local storage\n      localStorage.setItem('user', JSON.stringify(json));\n\n      // update the auth context\n      dispatch({\n        type: 'LOGIN',\n        payload: json\n      });\n\n      // update loading state\n      setIsLoading(false);\n\n      // Redirect the user to the previous path or a default page\n      const prevPath = localStorage.getItem('prevPath');\n      navigation(prevPath || '/');\n    } catch (error) {\n      setIsLoading(false);\n      setError(error.message);\n    }\n  };\n\n  // Store the previous path in local storage whenever the location changes\n  useState(() => {\n    localStorage.setItem('prevPath', location.pathname);\n  }, [location.pathname]);\n  return {\n    login,\n    isLoading,\n    error\n  };\n};\n_s(useLogin, \"mh7HQjwQlsKbobpz+a0PcKeyWfo=\", false, function () {\n  return [useAuthContext, useNavigate, useLocation];\n});","map":{"version":3,"names":["useState","useAuthContext","useNavigate","useLocation","useLogin","_s","error","setError","isLoading","setIsLoading","dispatch","navigation","location","login","email","password","response","fetch","method","headers","body","JSON","stringify","json","ok","Error","localStorage","setItem","type","payload","prevPath","getItem","message","pathname"],"sources":["D:/Mern folder/frontend/src/hooks/useLogin.js"],"sourcesContent":["import { useState } from 'react';\r\nimport { useAuthContext } from './useAuthContext';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\n\r\nexport const useLogin = () => {\r\n  const [error, setError] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const { dispatch } = useAuthContext();\r\n  const navigation = useNavigate();\r\n  const location = useLocation();\r\n\r\n  const login = async (email, password) => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:4000/user/login', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ email, password }),\r\n      });\r\n\r\n      const json = await response.json();\r\n\r\n      if (!response.ok) {\r\n        throw new Error(json.error);\r\n      }\r\n\r\n      // save the user to local storage\r\n      localStorage.setItem('user', JSON.stringify(json));\r\n\r\n      // update the auth context\r\n      dispatch({ type: 'LOGIN', payload: json });\r\n\r\n      // update loading state\r\n      setIsLoading(false);\r\n\r\n      // Redirect the user to the previous path or a default page\r\n      const prevPath = localStorage.getItem('prevPath');\r\n      navigation(prevPath || '/');\r\n    } catch (error) {\r\n      setIsLoading(false);\r\n      setError(error.message);\r\n    }\r\n  };\r\n\r\n  // Store the previous path in local storage whenever the location changes\r\n  useState(() => {\r\n    localStorage.setItem('prevPath', location.pathname);\r\n  }, [location.pathname]);\r\n\r\n  return { login, isLoading, error };\r\n};\r\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,cAAc,QAAQ,kBAAkB;AACjD,SAASC,WAAW,EAAEC,WAAW,QAAQ,kBAAkB;AAE3D,OAAO,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACQ,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM;IAAEU;EAAS,CAAC,GAAGT,cAAc,CAAC,CAAC;EACrC,MAAMU,UAAU,GAAGT,WAAW,CAAC,CAAC;EAChC,MAAMU,QAAQ,GAAGT,WAAW,CAAC,CAAC;EAE9B,MAAMU,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IACvCN,YAAY,CAAC,IAAI,CAAC;IAClBF,QAAQ,CAAC,IAAI,CAAC;IAEd,IAAI;MACF,MAAMS,QAAQ,GAAG,MAAMC,KAAK,CAAC,kCAAkC,EAAE;QAC/DC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAER,KAAK;UAAEC;QAAS,CAAC;MAC1C,CAAC,CAAC;MAEF,MAAMQ,IAAI,GAAG,MAAMP,QAAQ,CAACO,IAAI,CAAC,CAAC;MAElC,IAAI,CAACP,QAAQ,CAACQ,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAACF,IAAI,CAACjB,KAAK,CAAC;MAC7B;;MAEA;MACAoB,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEN,IAAI,CAACC,SAAS,CAACC,IAAI,CAAC,CAAC;;MAElD;MACAb,QAAQ,CAAC;QAAEkB,IAAI,EAAE,OAAO;QAAEC,OAAO,EAAEN;MAAK,CAAC,CAAC;;MAE1C;MACAd,YAAY,CAAC,KAAK,CAAC;;MAEnB;MACA,MAAMqB,QAAQ,GAAGJ,YAAY,CAACK,OAAO,CAAC,UAAU,CAAC;MACjDpB,UAAU,CAACmB,QAAQ,IAAI,GAAG,CAAC;IAC7B,CAAC,CAAC,OAAOxB,KAAK,EAAE;MACdG,YAAY,CAAC,KAAK,CAAC;MACnBF,QAAQ,CAACD,KAAK,CAAC0B,OAAO,CAAC;IACzB;EACF,CAAC;;EAED;EACAhC,QAAQ,CAAC,MAAM;IACb0B,YAAY,CAACC,OAAO,CAAC,UAAU,EAAEf,QAAQ,CAACqB,QAAQ,CAAC;EACrD,CAAC,EAAE,CAACrB,QAAQ,CAACqB,QAAQ,CAAC,CAAC;EAEvB,OAAO;IAAEpB,KAAK;IAAEL,SAAS;IAAEF;EAAM,CAAC;AACpC,CAAC;AAACD,EAAA,CAhDWD,QAAQ;EAAA,QAGEH,cAAc,EAChBC,WAAW,EACbC,WAAW;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}